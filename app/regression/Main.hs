module Main where

--hasktorch

--hasktorch-tools

import Torch.Control (foldLoop, mapAccumM)
import Torch.Device (Device (..), DeviceType (..))
import Torch.Functional (add, mseLoss)
import Torch.Layer.Linear (LinearHypParams (..), linearLayer)
import Torch.NN (sample)
import Torch.Optim (GD (..))
import Torch.Tensor (asValue)
import Torch.Tensor.TensorFactories (asTensor'')
import Torch.Train (loadParams, saveParams, showLoss, update, zeroTensor)
import Torch.Util.Chart (drawLearningCurve)

--Data
import Text.CSV

-- trainingData :: [([Float], Float)]
-- trainingData = [([21.0], 23.177279), ([22.0], 25.609262), ([20.0], 17.857388), ([36.0], 41.849865), ([15.0], 9.805235), ([62.0], 58.87466), ([95.0], 97.617935), ([20.0], 18.395128), ([5.0], 8.746748), ([4.0], 2.811416), ([19.0], 17.095373), ([96.0], 95.14907), ([62.0], 61.38801), ([36.0], 40.247017), ([15.0], 14.822486), ([65.0], 66.95807), ([14.0], 16.63508), ([87.0], 90.655136), ([69.0], 77.22983), ([89.0], 92.119064), ([51.0], 46.913876), ([89.0], 89.82635), ([27.0], 21.713804), ([97.0], 97.41207), ([58.0], 57.016315), ([79.0], 78.31056), ([21.0], 19.13151), ([93.0], 93.034836), ([27.0], 26.591124), ([99.0], 97.55155), ([31.0], 31.435247), ([33.0], 35.127247), ([80.0], 78.61043), ([28.0], 33.07113), ([47.0], 51.699673), ([53.0], 53.622353), ([69.0], 69.46306), ([28.0], 27.424973), ([33.0], 36.346443), ([91.0], 95.06141), ([71.0], 68.167244), ([50.0], 50.961555), ([76.0], 78.04237), ([4.0], 5.607665), ([37.0], 36.113346), ([70.0], 67.235214), ([68.0], 65.01324), ([40.0], 38.147537), ([35.0], 34.311413), ([94.0], 95.28504), ([88.0], 87.847496), ([52.0], 54.081707), ([31.0], 31.930635), ([59.0], 59.612473), ([0.0], -1.0401142), ([39.0], 47.493748), ([64.0], 62.6009), ([69.0], 70.91464), ([57.0], 56.148342), ([13.0], 14.055729), ([72.0], 68.11367), ([76.0], 75.597015), ([61.0], 59.225746), ([82.0], 85.45504), ([18.0], 17.76197), ([41.0], 38.68889), ([50.0], 50.963436), ([55.0], 51.835037), ([13.0], 17.07611), ([46.0], 46.561417), ([13.0], 10.347545), ([79.0], 77.91033), ([53.0], 50.170086), ([15.0], 13.2569065), ([28.0], 31.32275), ([81.0], 73.93088), ([69.0], 74.45114), ([52.0], 52.01932), ([84.0], 83.6882), ([68.0], 70.36987), ([27.0], 23.444792), ([56.0], 49.830517), ([48.0], 49.882267), ([40.0], 41.045258), ([39.0], 33.378345), ([82.0], 81.2975), ([100.0], 105.591835), ([59.0], 56.82457), ([43.0], 48.672527), ([67.0], 67.02151), ([38.0], 38.430763), ([63.0], 58.61467), ([91.0], 89.12377), ([60.0], 60.91054), ([14.0], 13.839599), ([21.0], 16.890852), ([87.0], 84.066765), ([73.0], 70.3497), ([32.0], 33.384743), ([2.0], -1.6329683), ([82.0], 88.54476), ([19.0], 17.440475), ([74.0], 75.692986), ([42.0], 41.97607), ([12.0], 12.592447), ([1.0], 0.27530727), ([90.0], 98.13258), ([89.0], 87.457214), ([0.0], -2.3447385), ([41.0], 39.329414), ([16.0], 16.687153), ([94.0], 96.58888), ([97.0], 97.70342), ([66.0], 67.01716), ([24.0], 25.634762), ([17.0], 13.413108), ([90.0], 95.15647), ([13.0], 9.744164), ([0.0], -3.4678838), ([64.0], 62.828163), ([96.0], 97.274055), ([98.0], 95.58017), ([12.0], 7.468502), ([41.0], 45.445995), ([47.0], 46.69014), ([78.0], 74.49936), ([20.0], 21.635006), ([89.0], 91.59549), ([29.0], 26.494879), ([64.0], 67.38654), ([75.0], 74.25363), ([12.0], 12.079917), ([25.0], 21.322737), ([28.0], 29.317701), ([30.0], 26.487137), ([65.0], 68.947), ([59.0], 59.10599), ([64.0], 64.37521), ([53.0], 60.207584), ([71.0], 70.3433), ([97.0], 97.10825), ([73.0], 75.758415), ([9.0], 10.804627), ([12.0], 12.1122), ([63.0], 63.283123), ([99.0], 98.030174), ([60.0], 63.193542), ([35.0], 34.85348), ([2.0], -2.8199139), ([60.0], 59.831398), ([32.0], 29.38505), ([94.0], 97.00148), ([84.0], 85.18657), ([63.0], 61.74063), ([22.0], 18.847982), ([81.0], 78.790085), ([93.0], 95.12401), ([33.0], 30.488813), ([7.0], 10.4146805), ([42.0], 38.983173), ([46.0], 46.11021), ([54.0], 52.451035), ([16.0], 21.16524), ([49.0], 52.286205), ([43.0], 44.18864), ([95.0], 97.13832), ([66.0], 67.22008), ([21.0], 18.983223), ([35.0], 24.38846), ([80.0], 79.44769), ([37.0], 40.03505), ([54.0], 53.320057), ([56.0], 54.55447), ([1.0], -2.7611825), ([32.0], 37.801826), ([58.0], 57.487415), ([32.0], 36.06293), ([46.0], 49.83538), ([72.0], 74.68953), ([17.0], 14.861594), ([97.0], 101.069786), ([93.0], 99.435776), ([91.0], 91.692406), ([37.0], 34.124733), ([4.0], 6.07939), ([54.0], 59.07247), ([51.0], 56.43046), ([27.0], 30.49413), ([46.0], 48.351727), ([92.0], 89.73154), ([73.0], 72.86282), ([77.0], 80.97144), ([91.0], 91.36566), ([61.0], 60.071377), ([99.0], 99.873825), ([4.0], 8.655714), ([72.0], 69.39858), ([19.0], 19.387802), ([57.0], 53.116283), ([78.0], 78.39683), ([26.0], 25.756124), ([74.0], 75.074844), ([90.0], 92.887726), ([66.0], 69.45499), ([13.0], 13.1210985), ([40.0], 48.09843), ([77.0], 79.314255), ([67.0], 68.488205), ([75.0], 73.23009), ([23.0], 24.683626), ([45.0], 41.90369), ([59.0], 62.226357), ([44.0], 45.96397), ([23.0], 23.526472), ([55.0], 51.800358), ([55.0], 51.107742), ([95.0], 95.79747), ([12.0], 9.241139), ([4.0], 7.6465297), ([7.0], 9.2817), ([100.0], 103.52662), ([48.0], 47.41007), ([42.0], 42.038357), ([96.0], 96.11983), ([39.0], 38.057663), ([100.0], 105.45038), ([87.0], 88.80307), ([14.0], 15.493011), ([14.0], 12.426246), ([37.0], 40.007095), ([5.0], 5.634031), ([88.0], 87.36939), ([91.0], 89.73952), ([65.0], 66.615), ([74.0], 72.91389), ([56.0], 57.191036), ([16.0], 11.217105), ([5.0], 0.67607677), ([28.0], 28.156685), ([92.0], 95.3958), ([46.0], 52.05491), ([54.0], 59.708645), ([39.0], 36.792248), ([44.0], 37.084576), ([31.0], 24.18438), ([68.0], 67.287254), ([86.0], 82.87059), ([90.0], 89.899994), ([38.0], 36.94173), ([21.0], 19.875622), ([95.0], 90.71481), ([56.0], 61.093678), ([60.0], 60.11135), ([65.0], 64.83296), ([78.0], 81.40382), ([89.0], 92.402176), ([6.0], 2.5766253), ([67.0], 63.807682), ([36.0], 38.677807), ([16.0], 16.828398), ([100.0], 99.78687), ([45.0], 44.689133), ([73.0], 71.00378), ([57.0], 51.57327), ([20.0], 19.878466), ([76.0], 79.50342), ([34.0], 34.588764), ([55.0], 55.738346), ([72.0], 68.19722), ([55.0], 55.816284), ([8.0], 9.391417), ([56.0], 56.01448), ([72.0], 77.99695), ([58.0], 55.3705), ([6.0], 11.894578), ([96.0], 94.79082), ([23.0], 25.690416), ([58.0], 53.520424), ([23.0], 18.313967), ([19.0], 21.426378), ([25.0], 30.413033), ([64.0], 67.68142), ([21.0], 17.085478), ([59.0], 60.917927), ([19.0], 14.995143), ([16.0], 16.749239), ([42.0], 41.46924), ([43.0], 42.84526), ([61.0], 59.12913), ([92.0], 91.30864), ([11.0], 8.673336), ([41.0], 39.314854), ([1.0], 5.3136864), ([8.0], 5.4052205), ([71.0], 68.54589), ([46.0], 47.334877), ([55.0], 54.090637), ([62.0], 63.29717), ([47.0], 52.459465)]

-- testData :: [([Float], Float)]
-- testData = [([77.0], 79.775154)]


toData :: [[String]] -> [([Float], Float)]
toData x = map (\[xs,x] -> ([xs],x)) $ map (map (read::String->Float)) $ tail x

main :: IO ()
main = do
  --CSV
  let fileName = "datasets/test.csv"
  input <- readFile fileName
  let csv = parseCSV fileName input
  case csv of 
      Left e -> print ("Parse error" ++ show e)
      Right y -> print "Parse Ok"
  let Right dataString = csv
  let dataSet = toData dataString
  let trainingData = tail dataSet
  let testData = [head dataSet]
  --Training
  let iter = 1500 :: Int
      device = Device CPU 0
  initModel <- sample $ LinearHypParams device 1 1
  ((trainedModel, _), losses) <- mapAccumM [1 .. iter] (initModel, GD) $ \epoc (model, opt) -> do
    let batchLoss = foldLoop trainingData zeroTensor $ \(input, output) loss ->
          let y' = linearLayer model $ asTensor'' device input
              y = asTensor'' device output
           in add loss $ mseLoss y y'
        lossValue = (asValue batchLoss) :: Float
    showLoss 5 epoc lossValue
    u <- update model opt batchLoss 5e-8
    return (u, lossValue)
  saveParams trainedModel "regression.model"
  --mapM_ (putStr . printf "%2.3f ") $ reverse allLosses
  drawLearningCurve "graph-reg.png" "Learning Curve" [("", reverse losses)]
  loadedModel <- loadParams (LinearHypParams device 1 1) "regression.model"
  print loadedModel
  --IO
  let output = linearLayer loadedModel $ asTensor'' device $ fst $ head testData
      y' = (asValue output) :: Float
      y = snd $ head testData
  putStr "\nPrediction: "
  putStrLn $ show y'
  putStr "Ground truth: "
  putStrLn $ show y
  putStr "Mse: "
  putStrLn $ show $ (y' - y) * (y' - y)



